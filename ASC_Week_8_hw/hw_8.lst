     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 32147586BCAD                s1 dw 1432h, 8675h, 0ADBCh
    14                                      lenS1 equ $ - s1
    15 00000006 00000000<rept>              d times lenS1 dd 0
    16                                      lenS2 equ 4
    17 0000001E 00<rept>                    s2 times lenS2 db 0
    18                                      b equ 4
    19                                      p equ 8
    20 00000022 00                          aux db 0
    21 00000023 00000000                    c_len_d dd 0
    22 00000027 00000000                    x1 dd 0
    23 0000002B 00000000                    x2 dd 0
    24 0000002F 00000000                    x3 dd 0
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          
    30 00000000 BE[00000000]                    mov esi, s1
    31 00000005 FC                              cld
    32 00000006 B906000000                      mov ecx, lenS1
    33                                          
    34                                          iterate_s:
    35                                          
    36 0000000B 890D[27000000]                      mov [x1], ecx
    37 00000011 B964000000                          mov ecx, 100
    38 00000016 BB00000000                          mov ebx, 0
    39 0000001B 66AD                                lodsw
    40                                              get_digits:            
    41 0000001D BA00000000                              mov edx, 0
    42 00000022 6683CA0F                                or dx, 0000_0000_0000_1111b
    43 00000026 6621C2                                  and dx, ax
    44 00000029 668993[1E000000]                        mov [s2 + ebx], dx
    45 00000030 66C1C804                                ror ax, 4
    46 00000034 43                                      inc ebx
    47 00000035 83FB04                                  cmp ebx, 4
    48 00000038 7402                                    je stop_digits
    49 0000003A E2E1                                loop get_digits
    50                                              stop_digits:
    51 0000003C BB00000000                          mov ebx, 0
    52 00000041 BA00000000                          mov edx, 0
    53 00000046 83FA00                              cmp edx, 0
    54 00000049 742D                                je sort_i
    55                                              out_sort_i:
    56 0000004B 8B1D[23000000]                      mov ebx, [c_len_d]
    57 00000051 A1[1E000000]                        mov eax, [s2]
    58 00000056 8983[06000000]                      mov [d+ebx], eax
    59 0000005C 83C304                              add ebx, 4
    60 0000005F 891D[23000000]                      mov [c_len_d], ebx
    61 00000065 8B0D[27000000]                      mov ecx, [x1]
    62 0000006B 49                                  dec ecx
    63 0000006C E29D                            loop iterate_s
    64 0000006E BA00000000                      mov edx, 0
    65 00000073 83FA00                          cmp edx, 0
    66 00000076 7437                            je finish
    67                                          sort_i:
    68 00000078 89D3                                mov ebx, edx
    69 0000007A 83C301                              add ebx, 1
    70 0000007D 8A82[1E000000]                      mov al, [s2+edx]
    71                                              sort_j:
    72 00000083 8AA3[1E000000]                          mov ah, [s2+ebx]
    73 00000089 38E0                                    cmp al, ah
    74 0000008B 7710                                    ja dont_switch    
    75 0000008D 8883[1E000000]                          mov [s2+ebx], al
    76 00000093 88A2[1E000000]                          mov [s2+edx], ah
    77 00000099 66C1C808                                ror ax, p
    78                                                  dont_switch:
    79 0000009D 43                                      inc ebx
    80 0000009E 83FB04                                  cmp ebx, 4
    81 000000A1 7402                                    je out_sort_j
    82 000000A3 E2DE                                loop sort_j  
    83                                              out_sort_j:
    84 000000A5 83C201                              add edx, 1
    85 000000A8 83FA03                              cmp edx, 3
    86 000000AB 749E                                je out_sort_i
    87 000000AD E2C9                            loop sort_i
    88                                          finish:
    89                                          
    90 000000AF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 000000B1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
