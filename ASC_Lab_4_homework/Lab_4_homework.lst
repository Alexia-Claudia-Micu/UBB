     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  
    10                                  ; our variables are declared here (the segment is called data) 
    11                                  segment data use32 class=data
    12                                  
    13                                  ; additions subtractions
    14                                  ; a - byte, b - word, c - double word, d - qword - Unsigned representation
    15                                  ; eg 2: (b+b)+(c-a)+d
    16                                  
    17 00000000 10                      a1 db 10h
    18 00000001 0213                    b1 dw 1302h
    19 00000003 28801200                c1 dd 128028h
    20 00000007 7979087123190200        d1 dq 2192371087979h
    21                                  
    22                                  ; Multiplications, divisions - Unsigned representation and signed representation
    23                                  ; ex 2: 2/(a+b*c-9)+e-d; a,b,c-byte; d-doubleword; e-qword
    24                                  
    25 0000000F 79                      a2 db 79h
    26 00000010 32                      b2 db 32h
    27 00000011 23                      c2 db 123h
    27          ******************       warning: byte data exceeds bounds [-w+number-overflow]
    28 00000012 90283392                d2 dd 92332890h
    29 00000016 5476987856341200        e2 dq 12345678987654h
    30                                  
    31 0000001E 87                      a3 db -79h
    32 0000001F CE                      b3 db -32h
    33 00000020 23                      c3 db 123h
    33          ******************       warning: byte data exceeds bounds [-w+number-overflow]
    34 00000021 90283310                d3 dd 10332890h
    35 00000025 5476987856341200        e3 dq 12345678987654h
    36                                  
    37                                  ; ex 17: x-(a*a+b)/(a+c/a)
    38                                  ; a,c-byte; b-doubleword; x-qword
    39                                  ; unsigned
    40                                  
    41 0000002D 56                      a4 db 56h
    42 0000002E 32543412                b4 dd 12345432h
    43 00000032 12                      c4 db 12h
    44 00000033 8877665544332211        x4 dq 1122334455667788h
    45                                  
    46 0000003B FB                      a5 db -5h
    47 0000003C CEFDFFFF                b5 dd -232h
    48 00000040 EE                      c5 db -12h
    49 00000041 8877665544332211        x5 dq 1122334455667788h
    50                                  
    51                                  segment code use32 class=code
    52                                  start:
    53                                  
    54                                      ; additions subtractions
    55                                      ; a - byte, b - word, c - double word, d - qword - Unsigned representation
    56                                      ; ex 2: (b+b)+(c-a)+d
    57                                      
    58                                      ;mov ebx, 0
    59                                      ;mov bx, [b1]
    60                                      ;add bx, [b1] ; bx = (b+b)
    61                                      
    62                                      ;mov ecx, [c1]
    63                                      ;mov eax, 0
    64                                      ;mov al, [a1]
    65                                      ;cbw
    66                                      ;cwd
    67                                      ;sub ecx, eax ; ecx = (c-a)
    68                                      
    69                                      ;add ebx, ecx ; ebx = (b+b)+(c-a)
    70                                      ;mov eax, [d1]
    71                                      ;mov ecx, [d1+4]
    72                                      ;add ebx, eax
    73                                      ;adc ecx, 0
    74                                      
    75                                      ; ex 17: (c+c-a)-(d+d)-b
    76                                      
    77                                      ;mov eax, 0
    78                                      ;mov eax, [c1]
    79                                      ;add eax, [c1]
    80                                      ;mov ebx, 0
    81                                      ;mov bl, [a1]
    82                                      ;sub eax, ebx ; eax = (c + c - a)
    83                                      
    84                                      ;mov ebx, [d1]
    85                                      ;mov edx, [d1+4] ;edx:ebx=d
    86                                      ;add ebx, [d1]
    87                                      ;adc edx, [d1+4] 
    88                                      ; edx:ebx = d+d1
    89                                      ;mov ecx,0
    90                                     
    91                                      ;sub eax,ebx
    92                                      ;sbb ecx,edx ; eax:ecx = (c+c-a)-(d+d)
    93                                      
    94                                      ;sub cx, [b1]
    95                                      ;sbb eax, 0
    96                                      
    97                                      ; a - byte, b - word, c - double word, d - qword - Signed representation
    98                                      ; ex 2: (c+b)-a-(d+d)
    99                                      
   100                                      ;mov eax, [c1]
   101                                      ;mov ebx, 0
   102                                      ;mov bx, [b1]
   103                                      ;add eax, ebx ; eax = c + b
   104                                      ;mov ebx, 0
   105                                      ;mov bl, [a1]
   106                                      ;sub eax, ebx ; eax = (c+b) - a
   107                                      ;mov ebx, [d1]
   108                                      ;mov ecx, [d1+4]
   109                                      ;add ebx, [d1]
   110                                      ;adc ecx, [d1+4] ; ecx:ebx = (d+d)
   111                                      ;mov edx, 0
   112                                      ;sub eax, ebx
   113                                      ;sbb edx, ecx ; eax:edx = (c+b)-a-(d+d)
   114                                      
   115                                      ; ex 17: (c+d-a)-(d-c)-b
   116                                      
   117                                      ;mov eax, [c1]
   118                                      ;mov ebx, 0
   119                                      ;add eax, [d1]
   120                                      ;adc ebx, [d1+4] ; ebx:eax = (c+d)
   121                                      
   122                                      ;mov ecx, 0
   123                                      ;mov cl, [a1]
   124                                      ;add eax, ecx
   125                                      ;adc ebx, 0 ; ebx:eax = (c+d-a)
   126                                      
   127                                      ;mov ecx, [d1]
   128                                      ;mov edx, [d1+4]
   129                                      ;sub ecx, [c1]
   130                                      ;sbb edx, 0 ; edx:ecx = (d-c)
   131                                      
   132                                      ;sub eax, ecx
   133                                      ;sbb ebx, edx ; ebx:eac = (c+d-a)-(d-c)
   134                                      
   135                                      ;mov ecx, 0
   136                                      ;mov cx, [b1]
   137                                      ;sub eax, ecx
   138                                      ;sbb ebx, 0 ; ebx:eax = (c+d-a)-(d-c)-b
   139                                      
   140                                      ;Multiplications, divisions - Unsigned representation and signed representation
   141                                      ; ex 2: 2/(a+b*c-9)+e-d
   142                                      ; a,b,c-byte; d-doubleword; e-qword
   143                                      ;unsigned
   144                                      
   145                                      ;mov eax, 0
   146                                      ;mov al, [b2]
   147                                      ;mul byte [c2] ; ax = b*c - word
   148                                      ;mov bx, 0
   149                                      ;mov bl, [a2]
   150                                      ;add ax, bx ; ax = a+b*c
   151                                      ;sub ax, 9 ; ax = a+b*c-9 - word
   152                                      
   153                                      ;mov bx, ax ; bx = a+b*c-9
   154                                      ;mov dx, 0
   155                                      ;mov ax, 2h ; need to divide a double word (dx:ax) by a word
   156                                      ;div word bx ; eax/bx -> ax = 2/(a+b*c-9)
   157                                      
   158                                      ;mov ebx, 0
   159                                      ;mov bx, ax ; bx = 2/(a+b*c-9)
   160                                      ;mov eax, 0
   161                                      ;add ebx, [e2]
   162                                      ;adc eax, [e2+4] ; eax:ebx = 2/(a+b*c-9) + e
   163                                      ;sub ebx, [d2]
   164                                      ;sbb eax, 0 ; eax:ebx = 2/(a+b*c-9)+e-d
   165                                      
   166                                      ; ex 2: 2/(a+b*c-9)+e-d
   167                                      ; a,b,c-byte; d-doubleword; e-qword
   168                                      ; signed
   169                                      
   170                                      ;mov ax, 0
   171                                      ;mov al, [b3]
   172                                      ;imul byte [c3] ; ax = b*c -> word
   173                                      
   174                                      ;mov bx, ax ; bx = b*c
   175                                      ;mov eax, 0
   176                                      ;mov al, [a3]
   177                                      ;cbw ; ax = a
   178                                      ;add ax, bx ; ax = a+b*c
   179                                      ;sub ax, 9 ; ax = a+b*c-9
   180                                      ;mov bx, ax ; bx = a+b*c-9
   181                                      
   182                                      ;mov dx, 0
   183                                      ;mov ax, 2h ; need to divide double word dx:ax to word bx
   184                                      ;idiv word bx ; dx:ax = 2/(a+b*c-9) -> the result is word ax
   185                                      ;cwd
   186                                      ;cdq ; result is in edx:eax
   187                                      ;add eax, [e3]
   188                                      ;adc edx, [e3+4] ; edx+eax = 2/(a+b*c-9)+e
   189                                      ;mov ebx, eax
   190                                      ;mov ecx, edx ; ecx:ebx = 2/(a+b*c-9)+e
   191                                      ;mov eax, [d3] 
   192                                      ;cdq ; edx:eax = d
   193                                      ;sub ebx, eax
   194                                      ;sbb ecx, edx
   195                                      
   196                                      ; ex 17: x-(a*a+b)/(a+c/a)
   197                                      ; a,c-byte; b-doubleword; x-qword
   198                                      ; unsigned
   199                                      
   200                                      ;mov ax, 0
   201                                      ;mov al, [c4] ; c from byte to word
   202                                      ;div byte [a4] ; al = c/a -> result is a byte
   203                                      ;add al, [a4] ; al = a +c/a
   204                                      ;mov cx, 0
   205                                      ;mov cl, al
   206                                      
   207                                      ;mov eax, 0
   208                                      ;mov al, [a4]
   209                                      ;mul byte [a4] ; ax = a*a -> result is a word
   210                                      ;add eax, ebx ; eax = a*a +b 
   211                                      ;push eax
   212                                      ;pop ax
   213                                      ;pop dx; eax is split on dx:ax
   214                                      ;div word cx ; ax = dx:ax / cx => ax = (a*a+b)/(a+c/a)
   215                                      
   216                                      ;mov ebx, 0
   217                                      ;mov bx, ax
   218                                      ;mov eax, [x4]
   219                                      ;mov edx, [x4+4]
   220                                      ;sub eax, ebx
   221                                      ;sbb edx, 0
   222                                      
   223                                      ; ex 17: x-(a*a+b)/(a+c/a)
   224                                      ; a,c-byte; b-doubleword; x-qword
   225                                      ; signed
   226 00000000 A0[40000000]                mov al, [c5]
   227 00000005 6698                        cbw
   228 00000007 F63D[3B000000]              idiv byte [a5] ; al = c/a
   229 0000000D 0205[3B000000]              add al, [a5] ; al = a+c/a
   230 00000013 6698                        cbw ; ax = a+c/a
   231 00000015 6689C1                      mov cx, ax ; cx = a+c/a
   232                                      
   233 00000018 A0[3B000000]                mov al, [a5]
   234 0000001D F62D[3B000000]              imul byte [a5] ; ax = a*a
   235 00000023 6699                        cwd ; dx:ax = a*a
   236 00000025 6652                        push dx
   237 00000027 6650                        push ax
   238 00000029 58                          pop eax ; eax = a*a
   239 0000002A 0305[3C000000]              add eax, [b5]
   240 00000030 50                          push eax
   241 00000031 B800000000                  mov eax, 0
   242 00000036 BA00000000                  mov edx, 0
   243 0000003B 6658                        pop ax
   244 0000003D 665A                        pop dx ; dx:ax = a*a+b
   245 0000003F 66F7F9                      idiv word cx ; ax = (a*a+b)/(a+c/a)
   246 00000042 6699                        cwd
   247 00000044 99                          cdq ; edx:eax = (a*a+b)/(a+c/a)
   248 00000045 8B1D[33000000]              mov ebx, [x4]
   249 0000004B 8B0D[37000000]              mov ecx, [x4+4] ;ecx:ebx = x
   250 00000051 29C3                        sub ebx, eax
   251 00000053 19D1                        sbb ecx, edx ; ecx:ebx = x-(a*a+b)/(a+c/a)
   252                                      
   253                                      
   254                                      
   255                                      
   256                                      
   257                                      
   258                                      ; call exit(0) ), 0 represents status code: SUCCESS
   259 00000055 6A00                        push dword 0 ; saves on stack the parameter of the function exit
   260 00000057 FF15[00000000]              call [exit] ; function exit is called in order to end the execution of the program
